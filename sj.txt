github 学习笔记：
$ cd /e/github/repo     定位到某个文件夹
$ pwd                   查看当前文件夹
$ init                  初始化和创建.git库
$ status                查看库状态
$ git add sj.txt        添加新文件或修改过的文件是一样的两步
$ git commit -m ""      提交，可添加多个，一起提交。引号为提交时的版本说明
$ git diff              查看之前的修改状态
$ git log               会看之前做了多少次修改
$ git log --pretty=oneline  如果嫌信息太多，就加这个参数
$git reset --hard HEAD^    当前版本回退上一个版本
$ git reset --hard ec9b  
               找到要回退的制定commit id，id不用全写出来。就能直接定位到指定版本号

$ git reflog            可以找到所有版本号，方便查找指定版本
$ git cat sj.txt         查看当前文件内容
$ git diff HEAD --sj2.txt   查看工作区提交与未提交的区别
$ git checkout -- sj2.txt    撤销刚才工作区的修改，
$ git reset HEAD sj2.txt     撤销已添加到暂存区文件到工作区，然后再撤销工作区修改
                        一种是在工作区，未add，一种是加到暂存区未提交，如果提交了，就用版本回退，如果本地提交远程库，就没办法了
$ git rm sj3.txt        删掉文件
$ git checkout -- sj3.txt 恢复被删文件，但会丢失最近一次修改
  git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

$ git tag v1.0 打标签，默认为HEAD
$ git tag      查看所有标签
$ git git log --pretty=oneline --abbrev-commit  找到所有的commit id 
$ git tag v9 f52c   给某一提交的commit id打标签
$ git show v9    查看某一标签信息
$ git tag -a v9 -m "说明" f52c  创建带有说明的标签，-a指定标签名，-m指定说明
 
$ git remote add origin git@github.com:17161875745/repo.git 本地关联远程库
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库

$ git push -u origin master
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令

$ git push origin master 关联好后每次的推送命令
$ git clone git@github.com:17161875745/sunjian.git  从远程库克隆到本地

$ ssh -T git@github.com    检测有没有和远程库连接
$ ssh-keygen -t rsa -C "17161875745@163.com"  创建密钥，区分大小写
********************************************************************************
                            以下为注意事项

首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

                                **********
需要友情提示的是，你看到的一大串类似1094adb...的是commit id（版本号）和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。
                              &&&&&&&&&&
每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线：

                                #############
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
现在，你又理解了Git是如何跟踪修改的，每次修改，如果不用git add到暂存区，那就不会加入到commit中

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

